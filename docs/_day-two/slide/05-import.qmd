---
title: '[Day Two]{style="color:darkblue"}:<br>[Import]{style="color:darkorange;"}'
subtitle: "60 min approx"
format:
  revealjs:
    width:  1648 #(3/2)
    height: 1080
    logo: img/UBEP.png
    footer: "UBEP's R training for supervisors"
    slide-number: true
    history: false
    preview-links: auto
    code-link: true
    multiplex: true
    df-print: paged
    chalkboard: 
      src: src/chalkboard-pipes-and-visualization.json
output-location: column
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  echo = TRUE,
  results = "hold"
)
library(countdown)
```

# Overview {style="color:darkblue;"}

## 

::: columns
::: {.column width="50%"}
### Questions

- How data can be imported from files on disk?
- How basic data import issues can be assessed?
:::

::: {.column width="50%"}
### Lesson Objectives

#### To be able to

- Read tabular data from a file into R.
- Know basics of base R `?read.csv`, and `?write.csv`.
- Know basics of `?readr::read_csv`, and `?readr::write_csv`.
- Know basics of `{heaven}` package.
- Working with `?rio::import`, and `?rio::export`.
- Mange presence/absence/multiple-empty header lines in source data.
- Select best data variable/column names for working with code
- Handle missing data (including empty rows and columns).
:::
:::

# R Import/Export

## Data file

For doing real data analyses, we need to interact with the _external_ world with data. Reading and writing them.

Mainly, we will work with the so-called rectangular data. I.e., information that can be organized in a tables:

- all columns (AKA variables) have the same number of rows.
- all rows (AKA observations) have the same number of columns
- each data value correspond to a single row-column pair within the table.


![](img/tidy-data-R4DS.png)


## Plain Vs. non-plain text data

Tabular data can be (quite always) saved as a plain text, readable by anyone, on every computer. 

::: columns
::: {.column width="50%"}

Most common plain-text tabular data file format is "CSV", i.e., Comma-Separated Value.

```csv
id,age,weigth,
1,47,80,
2,51,76,
3,27,92
```

File extension for this kind of file is `.csv` (e.g., `data.csv`)

::: {.fragment .fade-in}
::: callout-warning
In EU, we use a comma to separate decimal digits instead of a dot. For this reason, it would be ambiguous to use comma to separate field in CSV, which must use quotes in those cases. For this reason, there is an alternative version of CSV, called CSV2 (using the same file extension `.csv`!!) which uses a semicolon to separate fields and can use comma for numbers.

::: columns
::: {.column widht="50%"}

CSV
```csv
id,age,weigth,
1,47,"80,4",
2,51,"76,3",
3,27,92
```
:::

::: {.column widht="50%"}
CSV2
```csv
id;age;weigth;
1;47;80,4;
2;51;76,3;
3;27;92
```
:::
:::

:::
:::

:::
::: {.column width="50%"}

On the other hand, it could be difficult to collect data in plain text, and often they are collected by other software, e.g., Excel, in non-plain text format.

![](img/excel-data.png)

File extension for this kind of file is `.xlsx` (e.g., `data.xlsx`)

:::
:::

## Base R



## Tidyverse



## `{rio}`

::: callout-tip
In R exist different naming convention for reading data. Tidyverse use consistently `read_*` (e.g., `read_csv`, `read_rds`) and `write_*` (e.g., `write_csv`, `write_rds`), where `*` is the file format used. Base R an inconsistent combination of `read.*` (e.g., `read.csv`), `read*` (e.g., `readRDS`), `write.*` (e.g., `write.csv`), `write*` (e.g., `writeLines`), `load` and `save*` (e.g., `saveRDS`).

We will introduce and use the `{rio}` package which use 
:::


# Cleaning imported data

## Headers

## Variable names

## Missing data

# Homework

## Posit's RStudio Cloud Workspace

-   Project: Day-1
-   Instructions:
    -   Go to: https://bit.ly/ubep-rws-website
    -   The text is the Day-1 assessment under the tab "Summative Assessments".
-   Script to complete on RStudio: `solution.R`

## Acknowledgment

To create the current lesson, we explored, used, and adapted content from the following resources:

-   [Carpentrie](https://carpentries.org/)'s [Programming with R](https://swcarpentry.github.io/r-novice-inflammation/) course material.
-   [Carpentrie](https://carpentries.org/)'s [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/) course material.
-   [Hadley Wickham](https://hadley.nz/)'s [Advanced R - (2e)](https://adv-r.hadley.nz)
-   [Hadley Wickham](https://hadley.nz/)'s [R for Data Science](https://r4ds.had.co.nz/)
-   [Hadley Wickham](https://hadley.nz/)'s [R for Data Science (2e)](https://r4ds.hadley.nz/)
-   [qcbs](https://qcbs.ca/)'s [Introduction Ã  `ggplot2`](https://r.qcbs.ca/workshop03/)

The slides are made using [Posit](https://posit.co/)'s [Quarto](https://quarto.org/) open-source scientific and technical publishing system powered in R by [Yihui Xie](https://yihui.org/)'s [Kintr](https://yihui.org/knitr/).

### Additional resources

-   [Hadley Wickham](https://hadley.nz/)'s [Tidyverse style guide](https://style.tidyverse.org/index.html)
-   [Hadley Wickham]()'s [answer](https://community.rstudio.com/t/why-cant-ggplot2-use/4372/7) to why `+` in `{ggplot2}` instead of *standard* pipe.

### License

```{=html}
 <p xmlns:cc="http://creativecommons.org/ns#" ><a rel="cc:attributionURL" href="https://github.com/UBESP-DCTV/2023-ecdc-rws">This work</a> by <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://github.com/CorradoLanera">Corrado Lanera, Ileana Baldi, and Dario Gregori</a> is licensed under <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p> 
```
### References
