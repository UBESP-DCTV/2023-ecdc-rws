# Overview {style="color:darkblue;"}

## 

::: columns
::: {.column width="50%"}
### Questions

-   What kind of objects have R?
-   How can I manage them?
-   How can I control the flow of code execution?
-   How can I define custom functions?
:::

::: {.column width="50%"}
### Lesson Objectives

#### To be able to do/use

-   Define `for` loops and `if` conditional executions
-   Create functions
:::
:::

## Data structure: (atomic) vectors

Atomic vectors are homogeneous/flat objects, i.e. all the objects composing the sequence **must** be of the same type, and cannot contain other (nested) sequences.

Four main types (`?typeof`) of atomic vectors:

::: columns
::: {.column width="30%"}
|         |               |
|---------|---------------|
| Logical | `?is.logical` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
typeof(TRUE)
```

```{r}
#| output-location: column
c(is.atomic(FALSE), is.logical(FALSE))
```
:::
:::

<br>

::: columns
::: {.column width="30%"}
|         |               |
|---------|---------------|
| Integer | `?is.integer` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
typeof(1:3)
```

```{r}
#| output-location: column
c(is.atomic(1:3), is.integer(1:3))
```
:::
:::

<br>

::: columns
::: {.column width="30%"}
|        |              |
|--------|--------------|
| Double | `?is.double` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
typeof(1.2)
```

```{r}
#| output-location: column
c(is.atomic(1.2), is.double(1.2))
```
:::
:::

<br>

::: columns
::: {.column width="30%"}
|           |                 |
|-----------|-----------------|
| Character | `?is.character` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
typeof("Hello supervisors")
```

```{r}
#| output-location: column
c( # line brakes don't brake execution
  is.atomic("Hello supervisors"),
  is.character("Hello supervisors")
)
```
:::
:::

<br>

::: columns
::: {.column width="30%"}
Elements can be named
:::

::: {.column width="70%"}
```{r}
#| output-location: column
c(one = 1, two = 2, three = 3)
```
:::
:::

## Data structure: (other) vectors - Factors

Other structure in R are based on atomic vectors, i.e. are of one of the base types but have more *structure* (similar structures are called `?class`)

**Factors** are discrete (i.e. based on `?integer`s) variables with labels.

::: columns
::: {.column width="25%"}
|         |              |
|---------|--------------|
| Factors | `?is.factor` |
:::

::: {.column width="75%"}
```{r}
#| output-location: column
gender <- factor(
  c("male", "female", "female"),
  levels = c("female", "male", "other")
)
gender
```

```{r}
#| output-location: column
is.factor(gender)
```

```{r}
#| output-location: column
typeof(gender)
```

```{r}
#| output-location: column
class(gender)
```

```{r}
#| output-location: column
as.character(gender)
```

```{r}
#| output-location: column
as.integer(gender)
```
:::
:::

::: columns
::: {.column width="25%"}
|        |           |
|--------|-----------|
| Levels | `?levels` |
:::

::: {.column width="75%"}
```{r}
#| output-location: column
levels(gender)
```
:::
:::

::: callout-tip
You can investigate the internal structure of any R objects using `?str`.
:::

::: columns
::: {.column width="25%"}
|           |        |
|-----------|--------|
| Structure | `?str` |
:::

::: {.column width="75%"}
```{r}
#| output-location: column
str(gender)
```
:::
:::

## Data structure: (other) vectors - Dates / Date-times

Other structure in R are based on atomic vectors, i.e. are of one of the base types but have more *structure* (similar structures are called `?class`)

**Dates** are counts (based on `?double`s) of days since 1970-01-01.[^1]

[^1]: This date is know as the Unix Epoch.

::: columns
::: {.column width="30%"}
|       |            |
|-------|------------|
| Dates | `?as.Date` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
date <- as.Date("1970-01-10")
date
```

```{r}
#| output-location: column
typeof(date)
```

```{r}
#| output-location: column
class(date)
```

```{r}
#| output-location: column
as.double(date)
```

```{r}
#| output-location: column
str(date)
```
:::
:::

**Date-Time** are counts (based on `?double`s) of seconds since 1970-01-01.

::: columns
::: {.column width="30%"}
|            |                   |
|------------|-------------------|
| Date-times | `?as.POSIXct`[^2] |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
date_time <- as.POSIXct(
  "1970-01-10 13:10",
  tz = "UTC"
)
date_time
```

```{r}
#| output-location: column
typeof(date_time)
```

```{r}
#| output-location: column
class(date_time)
```

```{r}
#| output-location: column
as.double(date_time)
```

```{r}
#| output-location: column
str(date_time)
```
:::
:::

[^2]: POSIXct: "Portable Operating System Interface - Calendar Time".


## Data structure: list (vectors)

List vectors are heterogeneous/nestable objects, i.e. objects composing the sequence **can** be of distinct types, and can contain other (nested) sequences.

::: columns
::: {.column width="15%"}
|      |         |
|------|---------|
| List | `?list` |
:::

::: {.column width="85%"}
```{r}
#| output-location: column
db_list <- list(
  age = c(70, 85, 69),
  height = c(1.5, 1.72, 1.81),
  at_risk = c(TRUE, FALSE, TRUE),
  gender = factor(
    c("male", "female", "female"),
    levels = c("female", "male", "other")
  )
)
db_list
```

<br>

```{r}
#| output-location: column
str(db_list)
```
:::
:::

## Data structure: (other) lists - data frames (and tibble)

Other structure in R are based on list vectors, i.e. are heterogeneous sequence of objects.

**data frames** are ordered list of equally sized homogeneous named vectors. I.e. the are used for tabular data:

::: foo-to-separate-the-list-from-the-below-columns
-   ordered list of columns of information, with headers (`?names`)
-   in a column there is one type of information (homogeneous)
-   all columns have the same `?length`, i.e. number of rows (`?nrow`)
:::

::: columns
::: {.column width="30%"}
|             |               |
|-------------|---------------|
| Data frames | `?data.frame` |

::: callout-tip
During the course we will see, explain and use *tibbles* (from the package `{tibble}`): a modern, enhanced, better displayed, and with stricter and more consistent structure than standard data frames.
:::
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df <- data.frame(
  age = c(70, 85, 69),
  height = c(1.5, 1.72, 1.81),
  at_risk = c(TRUE, FALSE, TRUE),
  gender = factor(
    c("male", "female", "female"),
    levels = c("female", "male", "other")
  )
)
db_df
```

```{r}
#| output-location: column
names(db_df)
```

```{r}
#| output-location: column
nrow(db_df)
```

```{r}
#| output-location: column
ncol(db_df)
```

```{r}
#| output-location: column
dim(db_df)
```
:::
:::

## Data structure: *vectors* as trains

::: callout-important
R works on vectors of two types only:

-   **Atomic** (homogeneous / flat)
-   **List** (heterogeneous / nested)
:::

Think of objects in R (any objects in R!) as a train (either atomic or list) made of wagons:

-   a train (i.e., a vector) is sequence of wagons (i.e., objects, homogeneous or heterogeneous, possibly other trains)
-   wagons have content (i.e., the data they contain)
-   wagons can have labels (i.e., names)

![`x <- list(a = 1:3, b = "a", 4:6)` (image adapted from [Advanced-R](https://adv-r.hadley.nz/subsetting.html))](img/train-labels.png)

## Data structure: Subsetting data - subset

::: callout-important
You can refer to *subsetting* objects (i.e., a train) as performing two operations mainly:

-   create another objects (i.e., another train) with a subset of its elements (i.e., wagons)
-   extract the content of a (single) object (i.e., the content of a wagon)

You can select more than one object/*wagon* when subsetting, but a single one only when *extracting*!
:::

Three ways to identify elements (i.e., wagons):

::: columns
::: {.column width="30%"}
|          |     |
|----------|-----|
| Original |     |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df
```
:::
:::

::: columns
::: {.column width="30%"}
|                    |     |
|--------------------|-----|
| Subset by position | `[` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df[c(2, 3)]
```
:::
:::

::: columns
::: {.column width="30%"}
|                 |     |
|-----------------|-----|
| Subset by names | `[` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df[c("height", "age")]
```
:::
:::

::: columns
::: {.column width="30%"}
|                     |     |
|---------------------|-----|
| Subset by logic[^3] | `[` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df[c(TRUE, FALSE, FALSE, TRUE)]
```
:::
:::

[^3]: Logical subsetting vector **must** be the same `?lenght` of the object (i.e., number of train's wagons).

## Data structure: Subsetting data - coordinates

::: callout-important
A data frame (and `tibble`s) can be see as a "matrix" (or a table).
:::

Data frames values can be subsetted using "\[rows, column\]" notation

::: columns
::: {.column width="40%"}
|          |     |
|----------|-----|
| Original |     |
:::

::: {.column width="60%"}
```{r}
#| output-location: column
db_df
```
:::
:::

::: columns
::: {.column width="40%"}
|             |                |
|-------------|----------------|
| coordinates | `[rows, cols]` |
:::

::: {.column width="60%"}
```{r}
#| output-location: column
db_df[3, 2]
```

```{r}
#| output-location: column
db_df[3, "age"]
```
:::
:::

::: columns
::: {.column width="40%"}
|                                    |                          |
|------------------------------------|--------------------------|
| ask *anything*<br>get *everything* | `[, cols]`<br>`[rows, ]` |
:::

::: {.column width="60%"}
```{r}
#| output-location: column
db_df[, "age"]
```

```{r}
#| output-location: column
db_df[3, ]
```
:::
:::

::: columns
::: {.column width="40%"}
|                    |     |
|--------------------|-----|
| multiple selection | `[` |
:::

::: {.column width="60%"}
```{r}
#| output-location: column
db_df[3, 1:2]
```

```{r}
#| output-location: column
db_df[3:2, c(2, 4)]
```
:::
:::

::: columns
::: {.column width="40%"}
::: callout-tip
Use the additional argument `drop = FALSE` to maintain the data frame structure. Using `tibble`s we will consistently get always a `tibble` when subsetting with coordinates!
:::
:::

::: {.column width="60%"}
```{r}
#| output-location: column
db_df[3, 2, drop = FALSE]
```

```{r}
#| output-location: column
db_df[3, "age", drop = FALSE]
```

```{r}
#| output-location: column
db_df[, "age", drop = FALSE]
```
:::
:::

## Data structure: Subsetting data - extract

::: callout-important
You can refer to *subsetting* objects (i.e., a train) as performing two operations mainly:

-   create another objects (i.e., another train) with a subset of its elements (i.e., wagons)
-   extract the content of a (single) object (i.e., the content of a wagon)

You can select more than one object/*wagon* when subsetting, but a single one only when *extracting*!
:::

Two ways to identify a (single!) element (i.e., a wagon):

::: foo-to-separate-the-list-from-the-below-columns
-   with its position.
-   with its name, if it has a name.
:::

::: columns
::: {.column width="30%"}
|          |     |
|----------|-----|
| Original |     |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df
```
:::
:::

::: columns
::: {.column width="30%"}
|            |      |
|------------|------|
| Extracting | `[[` |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df[[1]]
```

```{r}
#| output-location: column
db_df[["height"]]
```
:::
:::

::: columns
::: {.column width="30%"}
|            |         |
|------------|---------|
| Extracting | `$`[^4] |
:::

::: {.column width="70%"}
```{r}
#| output-location: column
db_df$height
```
:::
:::

[^4]: Discouraged in non-interactive usage because of its unpredictable results due to partial matching (`?"$"` ).






## Your turn

::: callout-caution
## Your turn

-   Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2)(<https://bit.ly/ubep-rws-pad-ed2>)

-   Connect to the Day-1 project in RStudio cloud (<https://bit.ly/ubep-rws-rstudio>)
:::

1.  Before to evaluate it, in the pad, under the section `1.1. Ex3`, write (in a new line) what is your expected result (including *an error*).

2.  Before to evaluate it, in the pad, under the section `1.1. Ex4`, write (in a new line) what is your expected result  (including *an error*).

3.  Then, open the script `02-atomic-vectors.R` and follow the instruction step by step.

4.  Then, open the script `03-subsetting.R` and follow the instruction step by step.


::: {.fragment .fade-out fragment-index="1"}
```{r}
#| echo: false
countdown(
  minutes = 15,
  left = "25%",
  right = "25%",
  top = "70%",
  bottom = 0,
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```
:::

::: {.fragment .fade-in fragment-index="1"}
::: callout-important
- Coercion rule from *specific* to *general*:<small>logical \> integer \> double \> character</small>

-   Subset operation can be performed in sequence on the same object directly.
-   Crucial to know if you are working on a subset of an object or its content.
:::
:::

## My turn

YOU: Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2)(<https://bit.ly/ubep-rws-pad-ed2>) and write there questions & doubts (and if I am too slow or too fast)

ME: Connect to the Day-1 project in RStudio cloud

- (<https://bit.ly/ubep-rws-rstudio>): script `02-vectors.R`
- (<https://bit.ly/ubep-rws-rstudio>): script `03-matrices_dataframes.R`


## Break

```{r}
#| echo: false
countdown(
  minutes = 10,
  left = "15%",
  right = "15%",
  top = "15%",
  bottom = "15%",
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```

## Control flow [skipped]

::: columns
::: {.column width="45%"}
+---------+-------------+
| If-then | ``` r       |
|         | if (cond) { |
|         |   # <code>  |
|         | }           |
|         | ```         |
+---------+-------------+
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
x <- 3

print("start")
if (x > 3) {
  print("ok")
}
print("end")
```
:::
:::

<br>

::: columns
::: {.column width="45%"}
+--------------+-------------+
| If-then-else | ``` r       |
|              | if (cond) { |
|              |   # <code>  |
|              | } else {    |
|              |   # <code>  |
|              | }           |
|              | ```         |
+--------------+-------------+
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
print("start")
if (x > 3) {
  print("ok")
} else {
  print("ko")
}
print("end")
```
:::
:::

<br>

::: columns
::: {.column width="45%"}
::: callout-tip
You don't need to test if a logical is `TRUE` or `FALSE`, they *are* already `TRUE` or `FALSE`!
:::
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
is_to_print <- TRUE

if (is_to_print) {
  print("ok")
} else {
  print("ko")
}
```
:::
:::

::: columns
::: {.column width="45%"}
+------------+---------------------------+
| For cycles | ``` r                     |
|            | for (<var> in <vector>) { |
|            |   # <code>                |
|            | }                         |
|            | ```                       |
+------------+---------------------------+
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
print("start")
for (i in seq_len(x)) {
  print(paste("i is:", i))
}
print("start")
```
:::
:::

## Functions [skipped]

::: columns
::: {.column width="45%"}
+------------+-------------------------------+
| Definition | ``` r                         |
|            | name <- function(args) {      |
|            |   # body code of the function |
|            | }                             |
|            | ```                           |
+------------+-------------------------------+
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
sum_one <- function(x) {
  x + 1 # <1>
}
sum_one(x = 3)
```

1.  A function always returns its last evaluated objects.
:::
:::

<br>

::: columns
::: {.column width="45%"}
+---------+------------------------------------+
| Default | ``` r                              |
|         | name <- function(args = default) { |
|         |   # body code of the function      |
|         | }                                  |
|         | ```                                |
+---------+------------------------------------+
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
sum_one <- function(x = 3) {
  x + 1
}
sum_one()
sum_one(x = 3)
```
:::
:::

<br>

::: columns
::: {.column width="45%"}
|                      |             |
|----------------------|-------------|
| Positional arg match | `?function` |
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
x_exp_y <- function(x, y) {
  x^y
}
x_exp_y(2, 3)
```
:::
:::

<br>

::: columns
::: {.column width="45%"}
::: callout-tip
To avoid confusion, don't mix positional and named argument match using non standard order: start positional, and once you name an argument name all the subsequent!
:::
:::

::: {.column width="55%"}
```{r}
#| output-location: column
#| results: hold
x_exp_y(y = 3, 2)
```
:::
:::


## Your turn [optional]

::: callout-caution
## Your turn

-   Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2)(<https://bit.ly/ubep-rws-pad-ed2>)

-   Connect to the Day-1 project in RStudio cloud (<https://bit.ly/ubep-rws-rstudio>)
:::

1.  Before to evaluate it, in the pad, under the section `1.1. Ex5`, write (in a new line) what is your expected result from the following computation:

``` r
<code>
```

2.  Then, open the script `04-cond-and-funs.R` and follow the instruction step by step.

::: {.fragment .fade-out fragment-index="1"}
```{r}
#| echo: false
countdown(
  minutes = 15,
  left = "25%",
  right = "25%",
  top = "70%",
  bottom = 0,
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```
:::

::: {.fragment .fade-in fragment-index="1"}
::: callout-important
-   `?if` returns the last computed value, if any, or `NULL` otherwise (which may happen if there is no `else`).
-   `?for` returns `NULL`
:::
:::

## My turn [skipped]

YOU: Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2)(<https://bit.ly/ubep-rws-pad-ed2>) and write there questions & doubts (and if I am too slow or too fast)

ME: Connect to the Day-1 project in RStudio cloud (<https://bit.ly/ubep-rws-rstudio>): script `04-cond_loop.R`



