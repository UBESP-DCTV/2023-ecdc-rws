---
title: '[Day Two]{style="color:darkblue"}:<br>[Pipe(s)]{style="color:darkorange;"}'
subtitle: "~20 min"
format:
  revealjs:
    width:  1648 #(3/2)
    height: 1080
    logo: img/UBEP.png
    footer: "UBEP's R training for supervisors"
    slide-number: true
    history: false
    preview-links: auto
    code-link: true
    multiplex: true
    df-print: paged
    chalkboard: 
      src: src/chalkboard-pipes-and-visualization.json
output-location: column
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  echo = TRUE,
  results = "hold"
)
library(countdown)
```

# Overview {style="color:darkblue;"}

## 

::: columns
::: {.column width="50%"}
### Questions

-   What is a `pipe,` and how it works?
-   Which pipes should we know and care about?
:::

::: {.column width="50%"}
### Lesson Objectives

#### To be able to

-   Use the R native pipe (`|>`) to concatenate functions, knowing that the `{magrittr}` one (`%\>%`) has similar behavior.
:::
:::

# Pipes

..., and then..., and then..., and then ..., ...

## Setup [overview]

We adopted the Tidyverse ecosystem during the course using the `{tidyverse}` R package.

::: columns
::: {.column width="40%"}
```{r}
#| message: true
#| output-location: default
library(tidyverse)
```
:::

::: {.column width="60%"}
::: callout-tip
-   `pkg::fun()` explicitly tells R the package to look for the function.
-   If multiple packages have functions with the same name, and if the package is not indicated explicitly in the call, the last attached one (i.e., `?library`ed) has the priority (i.e., it *masks* the others).
-   Using `pkg::fun()` instead of `fun()`, you are sure about the function R calls.
:::
:::
:::

::: callout-caution
## Your turn

-   Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2)(<https://bit.ly/ubep-rws-pad-ed2>)

1.  Put an `X` next to the correct answer, under section 2.2 Ex9 in the pad.

If you attach only the `{tidyverse}` package in a new R session, and you call `filter()`, which function are you calling?

-   `stats::filter()`.
-   `dplyr::filter()`.
-   An error due to ambiguity.
-   I don't know what `stats::filter()` or `dplyr::filter()` means in R.
-   Other (please specify)
:::

```{r}
#| echo: false
countdown(
  minutes = 2,
  left = "50%",
  right = "0%",
  top = "65%",
  bottom = "5",
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```

## Tidyverse convention

One of the advantages of the Tidyverse is that common standards make everything easier to remember, understand (e.g., when reading the code for self or other people), and apply.

::: callout-important
1.  Functions are *verbs* (they *do* something)
2.  argument and objects are *nouns* (they *are* something)
3.  Functions first argument is always data (tibble/data frames)
4.  Output is always data.
5.  Output is always *the same* type of data (whatever input or option is provided)
:::

## Data analyses: a sequence of actions

**Import**: define a path, *and then...* read it, *and then...* initial fixes (e.g., removing empty rows or columns)

**Tidying**: take the data, *and then...* separate merged information, *and then...*, ..., *and then...* reshape the data to tidy them

**Transforming**: take the data, *and then...* mutate some variables accordingly to desiderata (e.g., making factors, converting dates, or cleaning text, *and then...* filter unwanted observations for the current study.

**Visualize**: take the data, *and then...* select what to plot, *and then...* define how to plot, *and then...* restyle accordingly to desiderata, *and then...* save it.

**Analyse**: take the data, *and then...* reshape it accordingly to the model requirements, *and then...* fit the model, *and then...* summarize the model, *and then...* plot the results

![](img/tidyverse-loop.png)

## Mental exercise

Suppose you have the following functions:

```{r}
add <- function(x, y) x + y
multiply_by <- function(x, by) x * by
divide_by_two <- function(x) x / 2
```

::: columns
::: {.column width="50%"}
Pretend that it is a difficult problem, and you want to use those functions **only** to find a trapezoid area with the following data already defined in your R session:

```{r}
a <- 2
b <- 3
h <- 4
```

::: callout-caution
## Your Turn

You can type your answer on sec 2.2 Ex.10 in the pad.
:::
:::

::: {.column width="50%"}
Area = $\frac{a+b}{2}h$

![](img/trapezoid.png)
:::
:::

```{r}
#| echo: false
countdown(
  minutes = 2,
  left = "45%",
  right = "5%",
  top = "60%",
  bottom = "10",
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```

## Overwrite the result [side-by-side]

```{r}
res <- add(a, b)
res <- divide_by_two(res)
res <- multiply_by(res, h)
res
```

-   What if we need to debug this code? If we make mistakes, we'll need to re-run the complete pipeline from the beginning!

-   It is hard to follow what is change each line considering that we repeated `res` (that is the name of our *final* result) six time!

> Change name every time can surely solve 2. Let see.

## Create middle objects [side-by-side]

```{r}
bases <- add(a, b)
half_bases <- divide_by_two(bases)
area <- multiply_by(half_bases, h)
area
```

-   We didn't repeat names, but now we have a lot of unuseful names (and objects!) defined in our workspace.

. . .

We must think of meaningful (unuseful!) names for all the intermediate objects, because we surely want to avoid situations like the following one

```{r}
res_1 <- add(a, b)
res_2 <- divide_by_two(res_1)
res_final <- multiply_by(res_2, h)
res_final
```

Which takes the worst of both, adding the difficult in debugging and correcting all the numbers in intermediate changes happened; or, worst, starting having non-sequential numbered variable names!

> So we can compose functions one inside other to get the resutl directly! Let see

## Compose function calls [side-by-side]

```{r}
res <- multiply_by(divide_by_two(add(a, b)), h)
res
```

1.  Quite unreadable and extremely difficult to follow; mainly because each argument is at a increasing distance from its function names (e.g., `multiply_by` is the first name appearing, and its second argument `h` is the last one!)

. . .

We could improve readability by indenting our code (which is surely a good thing to do)

```{r}
res <- multiply_by(
  divide_by_two(
    add(a, b)
  ),
  h
)
res
```

But, it remain quite difficult to understand *what* the function does; at least, it is not immediate natural!

> So that are the reasons wy we need a tool, and that is the *pipe*. Let's have a look at it.

## Use pipes [side-by-side]

In it simpler definition the pipe (which now a native symbol in R `|>`) is an operator that takes the result of whatever is evaluated in its left and use it as the first input of the function call at its right (that must be a proper function call, with at least one argument)

::: columns
::: {.column width="50%"}
::: callout-tip
In math point of view, pipe transforms $f(x,\ y)$ into $x\ |> f(y)$. So that we can restructure $f(g(x))$ as $g(x)\ |> f()$.
:::
:::

::: {.column width="50%"}
::: callout-tip
Try to read the pipe as "and than..."
:::
:::
:::

```{r}
res <- a |> 
  add(b) |> 
  divide_by_two() |> 
  multiply_by(h)
res
```

1.  Every argument is exactly next to its function call
2.  We create the result object only
3.  We can naturally *read* what the code do: "take a, *and then...* add b, *and then...* divide the result by two, *and then...* multiply the result by h"; and that's it, the spelled formula of trapezoid areas!

## Anonymous functions (Optional)

::: callout-important
Native pipe operator `|>` and anonymous functions were both introduced in R 4.1.0.
:::

Anonymous functions are... functions without a name! They are often used for short, throwaway operations.

-   Syntax (definition): `\(x) { ... }` where `x` is the argument and `{ ... }` is the function body.
-   Syntax (call): `(\(x) { ... })(val)` where `val` is the value to pass to the function.

```{r}
(\(x) x^2)(3)
```

::: columns
::: {.column width="50%"}
::: callout-important
The right side of the pipe must be a function call, and not a function definition! So, we need to enclose the function definition in parentheses `()` to make us able to call it immediately addin
:::
:::

::: {.column width="50%"}
::: callout-tip
Anonymous functions are often used with pipes, because we can define a function directly in the pipe, and use it immediately.
:::
:::
:::

```{r}
1:5 |>
  (\(x) x^2)()
```

## `{magrittr}` vs native [optional]

Pipes in R first appear with the `{magrittr}` package in 2014 as `%>%`, and it has been part of the tidyverse since that time. Now it still in the tidyverse, and still the default in RStudio IDE keyboard shortcut `CTRL/CMD + SHIFT + M`.

Now, Tidyverse team suggest to switch to the native pipe, appearing in R 4.0.1 in 2021.[^1]

[^1]: If you are interested, you can read more at <https://r4ds.hadley.nz/data-transform#sec-the-pipe>.

::: callout-tip
Change the RStudio default shortcut `CTRL/CMD + SHIFT + M` to use the native pipe.
:::

![](img/rstudio-native-pipe.png){.absolute left="412" width="824"}

## Your turn

::: callout-caution
## Your turn

-   Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2)(<https://bit.ly/ubep-rws-pad-ed2>) (Ex. 11)

-   Connect to our RStudio cloud (<https://bit.ly/ubep-rws-rstudio>)

Imagine we have a dataset representing the daily number of new infection cases reported in a specific area over a week. Unfortunately, there was a day when data couldn't be collected due to a system malfunction, resulting in a missing value. Our goal is to calculate the average (2 significant digits) day-to-day fluctuation in the number of new cases reported over the week.This measure can help public health officials understand the volatility in the spread of the infection and potentially identify any unusual spikes or drops in case numbers.

1.  Open the script `06-pipe.R`, and reformat the code using the native pipe the code.

2.  In the pad, under section `1.2 - Ex.9` report your preference putting an X next to your selection.
:::

You can solve the problem with the following code:

```{r}
new_cases <- c(125, 150, NA, 140, 165, 130)
avg_fluctuation <- 
  round(mean(abs(diff(new_cases)), na.rm = TRUE), 2)
avg_fluctuation
```

```{r}
#| echo: false
countdown(
  minutes = 15,
  left = "45%",
  right = "5%",
  top = "70%",
  bottom = 0,
  blink_colon = TRUE,
  play_sound = TRUE,
  margin = "5%",
  font_size = "4em"
)
```

## My turn

YOU: Connect to our [pad](https://bit.ly/ubep-rws-pad-ed2) (<https://bit.ly/ubep-rws-pad-ed2>) and write there questions & doubts (and if I am too slow or too fast)

ME: Connect to the Day-2 project in RStudio cloud (<https://bit.ly/ubep-rws-rstudio>): script `07-pipe.R`


## Acknowledgment {.smaller}

To create the current lesson, we explored, used, and adapted content from the following resources:

-   [Carpentrie](https://carpentries.org/)'s [Programming with R](https://swcarpentry.github.io/r-novice-inflammation/) course material.
-   [Carpentrie](https://carpentries.org/)'s [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/) course material.
-   [Hadley Wickham](https://hadley.nz/)'s [Advanced R - (2e)](https://adv-r.hadley.nz)
-   [Hadley Wickham](https://hadley.nz/)'s [R for Data Science](https://r4ds.had.co.nz/)
-   [Hadley Wickham](https://hadley.nz/)'s [R for Data Science (2e)](https://r4ds.hadley.nz/)

The slides are made using [Posit](https://posit.co/)'s [Quarto](https://quarto.org/) open-source scientific and technical publishing system powered in R by [Yihui Xie](https://yihui.org/)'s [Kintr](https://yihui.org/knitr/).

### Additional resources

-   [Hadley Wickham](https://hadley.nz/)'s [Tidyverse style guide](https://style.tidyverse.org/index.html)

### License

```{=html}
 <p xmlns:cc="http://creativecommons.org/ns#" ><a rel="cc:attributionURL" href="https://github.com/UBESP-DCTV/2023-ecdc-rws">This work</a> by <a rel="cc:attributionURL dct:creator" property="cc:attributionName" href="https://github.com/CorradoLanera">Corrado Lanera, Ileana Baldi, and Dario Gregori</a> is licensed under <a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"></a></p> 
```
