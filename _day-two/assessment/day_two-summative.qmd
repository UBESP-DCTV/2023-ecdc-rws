---
title: "Day Two - Assessment"
subtitle: "UBEP's R training for supervisors"
format:
  html:
    df-print: paged
    embed-resources: true
    code-fold: true
    code-annotations: select
bibliography: [references.bib, packages.bib]
csl: vancouver.csl
execute: 
  warning: false
editor: visual
params:
  solved: false
---

# Infrastructure, Import, and Tidying

::: {.callout-note appearance="minimal"}
## Learning Objectives

At the end of the assessment, participants should have demonstrated their ability to: [@R-dplyr; @R-janitor; @R-tidyr]

-   Create an RStudio project, understanding it's advantage against standard folders organization. Activate `{renv}` within the project, and manage it using it's three main functions (`status`, `restore`, and `snapshot` ). [@R-renv]

-   Understand and use a folder organization to navigate input (e.g., `data-raw/`, `data/`, `R/`) and output (e.g., `output/`) files. Ability to navigate them using `{here}` (`here`). [@R-here]

-   Know that exists specialized importing function and how to access their documentation, if in needs to use customized imports. In particular, the ones in the `{readr}`, and `{haven}` packages. [@R-readr; @R-haven]

-   Use the `{rio}` (`import`) for general-purpose import. [@R-rio]

-   Know how to manage table headers, and missing data at import stage using `{janitor}` (`clean_names`, `remove_empty` ), and `{unheadr}` (`mash_colnames`) , `{tidyr}` (`fill`).[@R-janitor; @R-unheadr; @R-tidyr]

-   Convert a dataset to a tidy one using `{tidyr}` (`separate`, `unite`, `pivot_longer`, `pivot_wider`).[@R-tidyr]
:::

# Preamble

::: callout-important
## Instructions

This section is for context only. Nothing has to be done in this section by the participants.
:::

::: panel-tabset
## Instructions

This assessment is the second of four ones regarding the UBEP's **R training for supervisors** for the ECDC.

To solve the exercise follow the text and find the assessments in which you need to fill the `___` where required in the code. Next, go to the corresponding section of the R script `solution.R` and try/run sequentially your code.

All the exercise are presented in a tabset panel with a tab containing all the missing parts, and a tab with the solved, completed (including output) code. This version of the file `r c("has not", "has")[params$solved + 1L]` the solution exposed.

## RStudio cloud

You can access to a dedicated R/RStudio environment on Posit Cloud at connecting [here](https://posit.cloud/spaces/455124/join?access_code=DHjcv_CtTVioVEoCQTqHwYFs1-N5zyPVnl7bW_K4). You need to create a free account on Posit Cloud, and next accept to join the "R training for supervisors" workspace. Inside that space, you can enter in the "day-1" project, and find inside all the data, script and resources useful to complete the assessment.

## Attribution

The text and examples in the present document are UBEP's variation/adaptation from the ECDC EPIET Outbreak Investigation, that can be found on GitHub at <https://github.com/EPIET/OutbreakInvestigation>.[@noauthor_epietoutbreakinvestigation_nodate]

## Copyright & License

The present work is released under the GPL-3 License.
:::

# Data preparation

::: panel-tabset
## Context

### Objectives

At the end of the case study, participants should be able to:

-   Conduct an investigation to identify the source of an outbreak
-   Apply the ten steps of an outbreak investigation
-   Explain the epidemiological and microbiological contributions to foodborne outbreak investigations
-   Perform data cleaning and analysis preparation steps using R
-   Perform descriptive, univariable and stratified analyses using R
-   Critically evaluate the results from statistical and microbiological analyses and identify food vehicles most likely associated with becoming ill
-   Understand the importance of writing outbreak reports (developing an analytical plan)

### The Alert

On November 14th 2006 the director of a high school in Greater Copenhagen, Denmark, contacted the regional public health authorities to inform them about an outbreak of diarrhoea and vomiting among participants from a school dinner party held on the 11th of November 2006. Almost all students and teachers of the school (750 people) attended the party.

The first people fell ill the same night and by 14 November, the school had received reports of diarrhoeal illness from around 200 - 300 students and teachers, many of whom also reported vomiting.

### Your mission

Your group has been tasked with investigating this outbreak; you have just received the information above.

## Data Import

The epidemiologists in the outbreak team decided to perform a retrospective cohort study in order to identify the food item that was the vehicle of the outbreak. The cohort was defined as students and teachers who had attended the party at the high school on 11th of November 2006.

A questionnaire was designed to conduct a survey on food consumption and on presentation of the illness. Information about the survey and a link to the questionnaire was circulated to students and teachers via the school's intranet with the request that everyone who attended the school party on 11th of November 2006 should fill in the questionnaire.

Practically all students and teachers check the intranet on a daily basis, because it is the school's main communication channel for information about courses, homework assignments, cancellation of lessons etc. The school's intranet was accessible for ill students or teachers from home so that everyone in the cohort could potentially participate and the response rate could be maximised. Additionally, the information about the investigation was also displayed on the screen in the main hall of the school.

These data were then exported from the survey tool and saved as `Copenhagen_raw.xlsx`.[^1]

### Load packages {#load-pkgs}

In this section, you will become familiar with the raw data set provided.

Before to start, open your RStudio project day-2 within the course [Posit Cloud Workspace](https://posit.cloud/spaces/455124/join?access_code=DHjcv_CtTVioVEoCQTqHwYFs1-N5zyPVnl7bW_K4) by clicking on it.[^2] You can find your exercise within the `solution.R` file in the `assessment/` folder. That script reports all the unsolved chunks of R code reported in this very document, including all the once under the "Exercise" tabs. Within the project's folder there is a folder named `data-raw/`. In the `data-raw/` folder there is our raw file `Copenhagen_raw.xlsx`.

# Environment preparation
First of all attach the packages we will use to the current working R session.
```{r}
#| label: setup
#| code-fold: false
library(tidyverse)
library(here)
library(janitor)
library(unheadr)
library(rio)
```

[^1]: This version of the dataset is slightlty modified respect the original `Copenhagen_raw.csv` raw dataset to include some additional *messiness* useful for the assessment purposes.[@epiet/ou]

[^2]: If you have downloaded it in your local environment, you can double click on the `project.Rproj` project file.


::: callout-important
## Instructions

In this section, participants should uncomment the correct line of code to import the dataset (lacated in the `data-raw/Copenhagen_raw.xlsx`) from their script (located in the `assessment/solution.R`), considering that we are working within a RStudio project and that we have already loaded the `{rio}` and the `{here}` packages in the working environment.

:::

::: {.panel-tabset group="ex-sol"}
## Exercise

```{r}
#| label: import-raw-ex
#| code-fold: false
#| eval: false

# linelist_raw <- import(here("Copenhagen_raw.xlsx"))
# linelist_raw <- import(here("data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- import(here("../data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- import("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- import("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- import("../Copenhagen_raw.xlsx")
# linelist_raw <- read(here("Copenhagen_raw.xlsx"))
# linelist_raw <- read(here("data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- read(here("../data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- read("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- read("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- read("../Copenhagen_raw.xlsx")

linelist_raw
```

## Solution

```{asis, echo = !params$solved}
::: {.callout-note appearance="minimal"}
Solution will appear on the "solved" document
:::
```

```{r}
#| label: import-raw-sol
#| include: !expr params$solved
#| echo: !expr params$solved

# import(here("Copenhagen_raw.xlsx"))
linelist_raw <- import(here("data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- import(here("../data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- import("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- import("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- import("../Copenhagen_raw.xlsx")
# linelist_raw <- read(here("Copenhagen_raw.xlsx"))
# linelist_raw <- read(here("data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- read(here("../data-raw/Copenhagen_raw.xlsx"))
# linelist_raw <- read("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- read("data-raw/Copenhagen_raw.xlsx")
# linelist_raw <- read("../Copenhagen_raw.xlsx")

linelist_raw
```
:::

You should now see that you have a `data.frame` called `linelist_raw` in your environment tab. You should also be able to see how many observations and variables it contains.

You can view the data by clicking on the name of it (`linelist_raw`) in the environment pane, or alternatively, type and execute `View(linelist_raw)` in the R console.


As you can see, the data are quite messy, especially in the first rows.
If you navigate them you can find that:

- it seams that there are leading headers for each group of columns (in the first of them)
- the "real" headers seams span across multiple rows (three)
- the presence of logical column with all visible rows as NA could be highlight the presence of empty lines
- the sex column seams to report only the a single (the first) occurrence of `female` and `male`

::: callout-important
## Instructions
In this section, participants should fill in `___` the proper instructions to correctly import the data set.

> Suggestion: Explore the piped code sequentially, one istruction a time, looking on all the intermediate results step by step.
:::

::: {.panel-tabset group="ex-sol"}
## Exercise

```{r}
#| label: import-ex
#| code-fold: false
#| eval: false

# read and import the dataset
# use the working instructions used previously
# In the first line, create the path to the data set only
linelist <- ___("___") |>  # here is the path only
  # import the data
  # don't consider the first row (headers' groups) as column names!
  ___(col_names = FALSE) |>
  # mash together the four rows composing the headers
  # merge the groups' headers with the proper headers in a single row
  # (tip.: use a function in the `{unheadr}`)
  ___(
    n_name_rows = ___,
    keep_names = FALSE,
    sliding_headers = ___
  ) |> 
  # remove empty cols (tip.: use a function in the `{janitor}`)
  ___(which = c("___")) |> 
  # clean all the names
  # convert them using standard cammel_case convention
  # (tip.: use a function in the `{janitor}`)
  ___() |> 
  # fill the `sex` column to have a complete data set
  ___(sex)


linelist
```

## Solution

```{asis, echo = !params$solved}
::: {.callout-note appearance="minimal"}
Solution will appear on the "solved" document
:::
```

```{r}
#| label: import-sol
#| include: !expr params$solved
#| echo: !expr params$solved

# read and import the dataset
# use the working instructions used previously
# In the first line, create the path to the data set only
linelist <- here("data-raw/Copenhagen_raw.xlsx") |> 
  # import the data
  # don't consider the first row (headers' groups) as column names
  import(col_names = FALSE) |>
  # mash together the four rows composing the headers
  # merge the groups' headers with the proper headers in a single row
  # (tip.: use a function in the `{unheadr}`)
  mash_colnames(                                                  #  <1>
    n_name_rows = 4,
    keep_names = FALSE,
    sliding_headers = TRUE
  ) |>  
  # remove empty columns (tip.: use a function in the `{janitor}`)
  remove_empty(which = c("cols")) |> 
  # clean all the names
  # convert them using standard cammel_case convention
  # (tip.: use a function in the `{janitor}`)
  clean_names() |> 
  # fill the `sex` column to have a complete data set
  fill(demo_sex)

linelist
```
1. Note:
    If you would like to throw away the groups' names at the beginning of each variable names, you could ignore the first line when importing the dataset (`import(skip = 1, col_names = FALSE)`) and remove the `sliding_headers` option to the `mash_colnames` call, considering three cols now only (`mash_colnames(3, keep_names = FALSE)`).
:::

### Exploring the data

Before you can begin analysing the data, you will need to become familiar with its contents and check for any errors, or values that don't make sense.  

In addition, it is advisable to consider what format or class each variable (column) should be in.  This is something you can include in your analysis plan.  For example, if you know you will be creating an epidemic curve of onset dates, you will need to ensure that the onset dates have been correctly interpreted by R as `date` class on import and are not being read as character strings. The column class or type is particularly important if you plan on performing any calculations on that column.

We will see how to do that, in the next lesson.

Anyway we can have a look at the current summary of column types and values by the `skim` function of the `{skimr}` package.

```{r}
#| label: skim-data
#| code-fold: false
skimr::skim(linelist)
```

## Data Cleaning

## Case Definition
:::


```{r}
#| label: pkg-bib
#| include: false
knitr::write_bib(
  c(
    .packages(),
    "ggplot2", "tidyverse", "renv", "here", "tidyr", "janitor",
    "rio", "haven", "readr", "unheadr"
  ) |> unique(),
  file = "packages.bib"
)
```
